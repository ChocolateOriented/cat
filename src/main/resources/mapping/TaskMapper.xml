<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cat.mapper.TaskMapper">
    <resultMap id="BaseResultMap" type="com.cat.module.entity.Task">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="order_id" jdbcType="VARCHAR" property="orderId" />
        <result column="customer_id" jdbcType="VARCHAR" property="customerId" />
        <result column="customer_name" jdbcType="VARCHAR" property="customerName" />
        <result column="mobile" jdbcType="VARCHAR" property="mobile" />
        <result column="order_type" jdbcType="VARCHAR" property="orderType" />
        <result column="product_type" jdbcType="VARCHAR" property="productType" />
        <result column="bank_no" jdbcType="VARCHAR" property="bankNo" />
        <result column="order_status" jdbcType="VARCHAR" property="orderStatus" />
        <result column="loan_amount" jdbcType="DECIMAL" property="loanAmount" />
        <result column="loan_term" jdbcType="INTEGER" property="loanTerm" />
        <result column="lent_amount" jdbcType="DECIMAL" property="lentAmount" />
        <result column="interest_mode" jdbcType="VARCHAR" property="interestMode" />
        <result column="interest_value" jdbcType="DECIMAL" property="interestValue" />
        <result column="penalty_mode" jdbcType="VARCHAR" property="penaltyMode" />
        <result column="penalty_value" jdbcType="DECIMAL" property="penaltyValue" />
        <result column="relief_amount" jdbcType="DECIMAL" property="reliefAmount" />
        <result column="charge_value" jdbcType="DECIMAL" property="chargeValue" />
        <result column="postpone_unit_charge" jdbcType="DECIMAL" property="postponeUnitCharge" />
        <result column="postpone_count" jdbcType="INTEGER" property="postponeCount" />
        <result column="postpone_total_amount" property="postponeTotalAmount"/>
        <result column="lend_time" jdbcType="TIMESTAMP" property="lendTime" />
        <result column="payoff_time" jdbcType="TIMESTAMP" property="payoffTime" />
        <result column="repayment_time" jdbcType="TIMESTAMP" property="repaymentTime" />
        <result column="ispayoff" jdbcType="TINYINT" property="ispayoff" />
        <result column="collector_id" jdbcType="VARCHAR" property="collectorId" />
        <result column="collector_name" jdbcType="VARCHAR" property="collectorName" />
        <result column="task_start_time" jdbcType="TIMESTAMP" property="taskStartTime" />
        <result column="task_end_time" jdbcType="TIMESTAMP" property="taskEndTime" />
        <result column="collect_period_begin" jdbcType="INTEGER" property="collectPeriodBegin" />
        <result column="collect_period_end" jdbcType="INTEGER" property="collectPeriodEnd" />
        <result column="collect_task_status" jdbcType="VARCHAR" property="collectTaskStatus" />
        <result column="collect_tel_remark" jdbcType="VARCHAR" property="collectTelRemark" />
        <result column="action_feedback" jdbcType="VARCHAR" property="actionFeedback" />
        <result column="collect_time" jdbcType="TIMESTAMP" property="collectTime" />
        <result column="collect_cycle" jdbcType="VARCHAR" property="collectCycle" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="create_by" jdbcType="VARCHAR" property="createBy" />
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
        <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
        <result column="remark" jdbcType="VARCHAR" property="remark" />
    </resultMap>
    <sql id="baseSql">
        id, order_id, customer_id, customer_name, mobile, order_type, product_type,
    bank_no, order_status, loan_amount, loan_term, lent_amount, interest_mode, interest_value,
    penalty_mode, penalty_value, relief_amount, charge_value, postpone_unit_charge, postpone_count,postpone_total_amount,
    lend_time, payoff_time, repayment_time, ispayoff, collector_id, collector_name, task_start_time,
    task_end_time, collect_period_begin, collect_period_end, collect_task_status, collect_tel_remark,
    action_feedback, collect_time, collect_cycle, create_time, create_by, update_time,
    update_by, remark
    </sql>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from t_task
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insert" parameterType="com.cat.module.entity.Task">
        insert ignore into t_task (id, order_id, customer_id,
        customer_name, mobile, order_type,
        product_type, bank_no, order_status,
        loan_amount, loan_term, lent_amount,
        interest_mode, interest_value, penalty_mode,
        penalty_value, relief_amount, charge_value,
        postpone_unit_charge, postpone_count, postpone_total_amount,lend_time,
        payoff_time, repayment_time, ispayoff,
        collector_id, collector_name, task_start_time,
        task_end_time, collect_period_begin, collect_period_end,
        collect_task_status, collect_tel_remark, action_feedback,
        collect_time, collect_cycle,
        create_by,  update_by,
        remark)
        values (#{id,jdbcType=BIGINT}, #{orderId,jdbcType=VARCHAR}, #{customerId,jdbcType=VARCHAR},
        #{customerName,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, #{orderType,jdbcType=VARCHAR},
        #{productType,jdbcType=VARCHAR}, #{bankNo,jdbcType=VARCHAR}, #{orderStatus,jdbcType=VARCHAR},
        #{loanAmount,jdbcType=DECIMAL}, #{loanTerm,jdbcType=INTEGER}, #{lentAmount,jdbcType=DECIMAL},
        #{interestMode,jdbcType=VARCHAR}, #{interestValue,jdbcType=DECIMAL}, #{penaltyMode,jdbcType=VARCHAR},
        #{penaltyValue,jdbcType=DECIMAL}, #{reliefAmount,jdbcType=DECIMAL}, #{chargeValue,jdbcType=DECIMAL},
        #{postponeUnitCharge,jdbcType=DECIMAL}, #{postponeCount,jdbcType=INTEGER}, #{postponeTotalAmount},#{lendTime,jdbcType=TIMESTAMP},
        #{payoffTime,jdbcType=TIMESTAMP}, #{repaymentTime,jdbcType=TIMESTAMP}, #{ispayoff,jdbcType=TINYINT},
        #{collectorId,jdbcType=VARCHAR}, #{collectorName,jdbcType=VARCHAR}, #{taskStartTime,jdbcType=TIMESTAMP},
        #{taskEndTime,jdbcType=TIMESTAMP}, #{collectPeriodBegin,jdbcType=INTEGER}, #{collectPeriodEnd,jdbcType=INTEGER},
        #{collectTaskStatus,jdbcType=VARCHAR}, #{collectTelRemark,jdbcType=VARCHAR}, #{actionFeedback,jdbcType=VARCHAR},
        #{collectTime,jdbcType=TIMESTAMP}, #{collectCycle,jdbcType=VARCHAR},
        #{createBy,jdbcType=VARCHAR},  #{updateBy,jdbcType=VARCHAR},
        #{remark,jdbcType=VARCHAR})
    </insert>
    <update id="updateByPrimaryKey" parameterType="com.cat.module.entity.Task">
        update t_task
        set order_id = #{orderId,jdbcType=VARCHAR},
        customer_id = #{customerId,jdbcType=VARCHAR},
        customer_name = #{customerName,jdbcType=VARCHAR},
        mobile = #{mobile,jdbcType=VARCHAR},
        order_type = #{orderType,jdbcType=VARCHAR},
        product_type = #{productType,jdbcType=VARCHAR},
        bank_no = #{bankNo,jdbcType=VARCHAR},
        order_status = #{orderStatus,jdbcType=VARCHAR},
        loan_amount = #{loanAmount,jdbcType=DECIMAL},
        loan_term = #{loanTerm,jdbcType=INTEGER},
        lent_amount = #{lentAmount,jdbcType=DECIMAL},
        interest_mode = #{interestMode,jdbcType=VARCHAR},
        interest_value = #{interestValue,jdbcType=DECIMAL},
        penalty_mode = #{penaltyMode,jdbcType=VARCHAR},
        penalty_value = #{penaltyValue,jdbcType=DECIMAL},
        relief_amount = #{reliefAmount,jdbcType=DECIMAL},
        charge_value = #{chargeValue,jdbcType=DECIMAL},
        postpone_unit_charge = #{postponeUnitCharge,jdbcType=DECIMAL},
        postpone_count = #{postponeCount,jdbcType=INTEGER},
        postpone_total_amount = #{postponeTotalAmount},
        lend_time = #{lendTime,jdbcType=TIMESTAMP},
        payoff_time = #{payoffTime,jdbcType=TIMESTAMP},
        repayment_time = #{repaymentTime,jdbcType=TIMESTAMP},
        ispayoff = #{ispayoff,jdbcType=TINYINT},
        collector_id = #{collectorId,jdbcType=VARCHAR},
        collector_name = #{collectorName,jdbcType=VARCHAR},
        task_start_time = #{taskStartTime,jdbcType=TIMESTAMP},
        task_end_time = #{taskEndTime,jdbcType=TIMESTAMP},
        collect_period_begin = #{collectPeriodBegin,jdbcType=INTEGER},
        collect_period_end = #{collectPeriodEnd,jdbcType=INTEGER},
        collect_task_status = #{collectTaskStatus,jdbcType=VARCHAR},
        collect_tel_remark = #{collectTelRemark,jdbcType=VARCHAR},
        action_feedback = #{actionFeedback,jdbcType=VARCHAR},
        collect_time = #{collectTime,jdbcType=TIMESTAMP},
        collect_cycle = #{collectCycle,jdbcType=VARCHAR},
        create_by = #{createBy,jdbcType=VARCHAR},
        update_by = #{updateBy,jdbcType=VARCHAR},
        remark = #{remark,jdbcType=VARCHAR}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select <include refid="baseSql"/>
        from t_task
        where id = #{id,jdbcType=BIGINT}
    </select>
    <select id="selectAll" resultMap="BaseResultMap">
        select <include refid="baseSql"/>
        from t_task
    </select>

    <select id="findTaskByOrderId" resultMap="BaseResultMap">
        SELECT <include refid="baseSql"/>
        FROM `t_task` WHERE `order_id` = #{orderId}
    </select>

    <select id="findList" resultType="com.cat.module.dto.TaskDto">
    
        SELECT
        t.product_type AS "productType",
        t.collect_cycle AS "collectCycle",
        t.loan_amount AS "principal",
        t.collect_time AS "collectTime",
        t.customer_id AS "customerId",
        t.customer_name AS "name",
        t.mobile AS "mobile",
        t.action_feedback AS "actionFeedback",
        CASE
        WHEN t.order_status = 'PAYOFF' THEN 0
        WHEN t.order_status = 'PAYMENT' and DATEDIFF(CURDATE(), t.repayment_time) <![CDATA[ > ]]>0
        THEN DATEDIFF(CURDATE(), t.repayment_time)*t.penalty_value + IFNULL(t.loan_amount,0)+IFNULL(t.interest_value,0)-IFNULL(t.relief_amount,0)
        WHEN t.order_status = 'payment' and DATEDIFF(CURDATE(), t.repayment_time) <![CDATA[ <= ]]>0
        THEN IFNULL(t.loan_amount,0)+IFNULL(t.interest_value,0)
        END  AS "customerTotalAmount",
        IFNULL(t.loan_amount,0)+IFNULL(t.interest_value,0) AS "principalAndInterest",
        t.repayment_time AS "repaymentTime",
        t.order_status AS "orderStatus",
        t.collect_tel_remark AS "remark",
        t.order_id AS "orderId",
        t.collector_name AS "collectorName",
        t.payoff_time AS "payoffTime",
        CASE
        WHEN t.order_status = 'PAYOFF' THEN DATEDIFF(t.payoff_time,t.repayment_time)
        WHEN t.order_status = 'PAYMENT' THEN DATEDIFF(CURDATE(), t.repayment_time)
        END  AS "overdueDays"
        FROM
        `t_task` t
        LEFT JOIN t_user u ON t.collector_id = u.id
        LEFT JOIN t_organization o ON u.organization_id = o.id
        
        <where>
            <if test="productType != null and productType != ''">
                AND t.product_type = #{productType}
            </if>
            <if test="collectCycle != null and collectCycle != ''">
                AND t.collect_cycle = #{collectCycle}
            </if>
            <if test="name != null and name != ''">
                AND t.customer_name LIKE concat('%',#{name},'%')
            </if>
            <if test="mobile != null and mobile != ''">
                AND t.mobile LIKE concat(#{mobile},'%')
            </if>
            <if test="orderId != null and orderId != ''">
                AND t.order_id = #{orderId}
            </if>
            <if test="collectorName != null and collectorName != ''">
                AND t.collector_name LIKE concat('%',#{collectorName},'%') 
            </if>
            <if test="actionFeedback != null and actionFeedback != ''">
                AND t.action_feedback = #{actionFeedback}
            </if>
            <if test="orderStatus != null and orderStatus != ''">
                AND t.order_status = #{orderStatus}
            </if>
            <if test="payoffTimeStart != null and payoffTimeEnd != null ">
                AND t.payoff_time BETWEEN #{payoffTimeStart} AND #{payoffTimeEnd}
            </if>
            <if test="collectTimeStart != null and collectTimeEnd != null ">
                AND t.collect_time BETWEEN #{collectTimeStart} AND #{collectTimeEnd}
            </if>
            <if test="overdueDaysStart != null and overdueDaysEnd != null ">
                <![CDATA[
				AND  (CASE WHEN t.order_status = 'PAYOFF' THEN DATEDIFF(t.payoff_time, t.repayment_time)
						   WHEN t.order_status = 'PAYMENT' THEN DATEDIFF(CURDATE(), t.repayment_time) END) >= #{overdueDaysStart}
				AND  (CASE WHEN t.order_status = 'PAYOFF' THEN DATEDIFF(t.payoff_time, t.repayment_time)
						   WHEN t.order_status = 'PAYMENT' THEN DATEDIFF(CURDATE(), t.repayment_time) END) <= #{overdueDaysEnd}
			  ]]>
            </if>
			<if test="collectorId != null and collectorId != ''">
                AND t.collector_id = #{collectorId} 
            </if>
            <!-- 角色条件 -->
            <if test="organizationLeaderId != null and organizationLeaderId != ''">
                <!--   主管 -->
                AND o.leader_id = #{organizationLeaderId}
            </if>
            and t.collect_task_status in ("TASK_IN_PROGRESS","TASK_FINISHED")
            and t.collector_id is not null

        </where>
        ORDER BY t.repayment_time DESC
    </select>
    
    
    <update id="batchUpdateExpiredTask"  >
	     <foreach collection="list" item="item" index="index" open="" close="" separator=";">
				UPDATE t_task 
				<set>
				    update_time = #{item.updateTime},
				    update_by = #{item.updateBy},
					collector_id = #{item.collectorId},
					collector_name = #{item.collectorName},
					collect_period_begin = #{item.collectPeriodBegin},
					collect_period_end = #{item.collectPeriodEnd},
					collect_cycle = #{item.collectCycle}
<!-- 					nextfollowdate = null -->
				</set>
				WHERE id = #{item.id}
		 </foreach>
    </update>
    
    <update id="batchinsertTask"  >
	     <foreach collection="list" item="item" index="index" open="" close="" separator=";">
				UPDATE t_task 
				<set>
				    update_time = #{item.updateTime},
				    update_by = #{item.updateBy},
				    task_start_time = now(),
					collector_id = #{item.collectorId},
					collector_name = #{item.collectorName},
					collect_period_begin = #{item.collectPeriodBegin},
					collect_period_end = #{item.collectPeriodEnd},
					collect_cycle = #{item.collectCycle},
					collect_task_status = #{item.collectTaskStatus}
				</set>
				WHERE id = #{item.id}
		 </foreach>
    </update>
    
    
    <select id="newfindDelayTaskByDunningcycle" resultType="com.cat.module.entity.TaskLog"> 
		   	 SELECT 
					CASE
			        WHEN t.order_status = 'PAYOFF' THEN DATEDIFF(t.payoff_time,t.repayment_time)
			        WHEN t.order_status = 'PAYMENT' THEN DATEDIFF(#{newDateTest}, t.repayment_time)
			        END  AS "overdueDays",
			        t.order_id  AS  orderId ,
					t.customer_id  AS  customerId,
					t.customer_name  AS  customerName,
					t.mobile  AS  mobile,
					t.order_type  AS  orderType,
					t.product_type  AS  productType,
					t.order_status  AS  orderStatus,
					t.loan_amount  AS  loanAmount,
					t.loan_term  AS  loanTerm,
					t.lent_amount  AS  lentAmountr,
					t.interest_mode  AS  interestMode,
					t.interest_value  AS  interestValue,
					t.penalty_mode  AS  penaltyMode,
					t.penalty_value  AS  penaltyValue,
					t.relief_amount  AS  reliefAmount,
					t.charge_value  AS  chargeValue,
					t.postpone_unit_charge  AS  postponeUnitCharge,
					t.postpone_count  AS  postponeCount,
					t.lend_time  AS  lendTime,
					t.payoff_time  AS  payoffTime,
					t.repayment_time  AS  repaymentTime,
					t.collector_id  AS  collectorId,
					t.collector_name  AS  collectorName,
					t.task_start_time  AS  taskStartTime,
					t.task_end_time  AS  taskEndTime,
					t.collect_period_begin  AS  collectPeriodBegin,
					t.collect_period_end  AS  collectPeriodEnd,
					t.collect_task_status  AS  collectTaskStatus,
					t.collect_tel_remark  AS  collectTelRemark,
					t.collect_time  AS  collectTime,
					t.collect_cycle  AS  collectCycle,
					t.remark  AS  remark,
					t.ispayoff AS ispayoff,
					t.id AS taskId
			FROM t_task t 
			 <where>
					t.collect_cycle =  #{collectCycle} 
					AND  t.collect_task_status = #{collectTaskStatus}
					AND DATEDIFF(#{newDateTest}, t.repayment_time) NOT BETWEEN #{begin} AND  #{end}
			 </where>
			ORDER BY loan_amount DESC
	</select>
	
	
	<select id="newfingDelayOrderByNotTask" resultType="com.cat.module.entity.TaskLog"> 
		SELECT
			CASE
	        WHEN t.order_status = 'PAYOFF' THEN DATEDIFF(t.payoff_time,t.repayment_time)
	        WHEN t.order_status = 'PAYMENT' THEN DATEDIFF(#{newDateTest}, t.repayment_time)
	        END  AS "overdueDays",
	        t.order_id  AS  orderId,
			t.customer_id  AS  customerId,
			t.customer_name  AS  customerName,
			t.mobile  AS  mobile,
			t.order_type  AS  orderType,
			t.product_type  AS  productType,
			t.order_status  AS  orderStatus,
			t.loan_amount  AS  loanAmount,
			t.loan_term  AS  loanTerm,
			t.lent_amount  AS  lentAmountr,
			t.interest_mode  AS  interestMode,
			t.interest_value  AS  interestValue,
			t.penalty_mode  AS  penaltyMode,
			t.penalty_value  AS  penaltyValue,
			t.relief_amount  AS  reliefAmount,
			t.charge_value  AS  chargeValue,
			t.postpone_unit_charge  AS  postponeUnitCharge,
			t.postpone_count  AS  postponeCount,
			t.lend_time  AS  lendTime,
			t.payoff_time  AS  payoffTime,
			t.repayment_time  AS  repaymentTime,
			t.collector_id  AS  collectorId,
			t.collector_name  AS  collectorName,
			t.task_start_time  AS  taskStartTime,
			t.task_end_time  AS  taskEndTime,
			t.collect_period_begin  AS  collectPeriodBegin,
			t.collect_period_end  AS  collectPeriodEnd,
			t.collect_task_status  AS  collectTaskStatus,
			t.collect_tel_remark  AS  collectTelRemark,
			t.collect_time  AS  collectTime,
			t.collect_cycle  AS  collectCycle,
			t.remark  AS  remark,
			t.ispayoff AS ispayoff,
			t.id AS taskId
		FROM t_task AS t
		where
			(t.collect_task_status = 'UNOPEND_TASK' or t.collect_task_status = 'TASK_POSTPONE')
			AND DATEDIFF(#{newDateTest}, t.repayment_time) >= #{day}
		ORDER BY loan_amount DESC
	</select>
	
<!-- 	<insert id="batchinsertTask"> -->
<!-- 		INSERT INTO t_mis_dunning_task( -->
<!-- 			id, -->
<!-- 			dunningpeopleid, -->
<!-- 			dunningpeoplename, -->
<!-- 			dealcode, -->
<!-- 			capitalamount, -->
<!-- 			begin, -->
<!-- 			deadline, -->
<!-- 			end, -->
<!-- 			dunningperiodbegin, -->
<!-- 			dunningperiodend, -->
<!-- 			dunnedamount, -->
<!-- 			ispayoff, -->
<!-- 			reliefamount, -->
<!-- 			dunningtaskstatus, -->
<!-- 			amountonend, -->
<!-- 			field1, -->
<!-- 			repaymenttime, -->
<!-- 			createby, -->
<!-- 			createdate, -->
<!-- 			updateby, -->
<!-- 			updatedate, -->
<!-- 			dunningcycle, -->
<!-- 			quality, -->
<!-- 			platformext, -->
<!-- 			debtbiztype -->
<!-- 		) VALUES -->
<!-- 		<foreach collection="list" item="item" index="index" separator=","> -->
<!-- 		 ( -->
<!-- 			#{item.id}, -->
<!-- 			#{item.dunningpeopleid}, -->
<!-- 			#{item.dunningpeoplename}, -->
<!-- 			#{item.dealcode}, -->
<!-- 			#{item.capitalamount}, -->
<!-- 			#{item.begin}, -->
<!-- 			#{item.deadline}, -->
<!-- 			#{item.end}, -->
<!-- 			#{item.dunningperiodbegin}, -->
<!-- 			#{item.dunningperiodend}, -->
<!-- 			#{item.dunnedamount}, -->
<!-- 			#{item.ispayoff}, -->
<!-- 			#{item.reliefamount}, -->
<!-- 			#{item.dunningtaskstatus}, -->
<!-- 			#{item.dunningAmounOnEnd}, -->
<!-- 			#{item.field1}, -->
<!-- 			#{item.repaymentTime}, -->
<!-- 			#{item.createBy}, -->
<!-- 			#{item.createDate}, -->
<!-- 			#{item.updateBy}, -->
<!-- 			#{item.updateDate}, -->
<!-- 			#{item.dunningcycle}, -->
<!-- 			#{item.quality}, -->
<!-- 			#{item.platformext}, -->
<!-- 			#{item.debtbiztype} -->
<!-- 		) -->
<!-- 		</foreach> -->
<!-- 	</insert> -->
	
<!-- 	<select id="findAtuoQ0Dealcode" resultType="string"> -->
<!--  	 SELECT -->
<!-- 		o.dealcode -->
<!-- 		FROM t_risk_order AS o -->
<!-- 		WHERE o.type = 'loan' -->
<!-- 			AND o.merchant_id = 7 -->
<!-- 			AND o.`status` = 'payment' -->
<!-- 			AND DATEDIFF(curdate(), o.repayment_time) = #{day} -->
<!-- 			AND NOT EXISTS  ( -->
<!-- 			SELECT -->
<!-- 					DISTINCT buyer_id -->
<!-- 				FROM t_risk_order AS o1 -->
<!-- 				WHERE o1.type = 'loan' -->
<!-- 					AND o1.merchant_id = 7 -->
<!-- 					AND o1.`status` = 'payoff' -->
<!-- 					AND o.buyer_id = o1.buyer_id -->
<!-- 					AND DATEDIFF(DATE(o1.payoff_time), DATE(o1.repayment_time)) > #{payoffday} -->
<!-- 			) -->
<!-- 			AND EXISTS ( -->
<!-- 				SELECT -->
<!-- 					1 -->
<!-- 				FROM t_risk_order AS o2 -->
<!-- 				WHERE o2.type = 'loan' -->
<!-- 					and o2.merchant_id = 7 -->
<!-- 					and o2.`status` in ('payment', 'payoff') -->
<!-- 					and o2.buyer_id = o.buyer_id -->
<!-- 				group by o2.buyer_id -->
<!-- 				HAVING count(1) > 1 -->
<!-- 			); -->
<!-- 	</select> -->
    
    <update id="updateReliefAmount">
     update t_task  set
     	update_time = now(),
	    update_by = #{userId},
	    relief_amount = #{reliefAmount}
     where  order_id = #{orderId}
      
    </update>
    
    <select id="findCustomeId" resultType="java.lang.String">
      select customer_id from t_task where  order_status='PAYMENT'
    
    </select>
    <select id="findCollectList" resultType="com.cat.module.dto.CollectDto">
        SELECT
		id as  collectorId,
		name as collectorName
		FROM
			`t_user`
		<where>
		<if test="collectCycle != null and collectCycle != '' ">
			and	collect_cycle LIKE concat('%',#{collectCycle},'%')
		</if>
		<if test="productType != null and productType != '' ">
			and	product_type = #{productType}
		</if>
		<if test="organization != null">
			and organization_id in
			<foreach collection="organization" item="item"  open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
		<if test="isAutoAssign != null and isAutoAssign != '' ">
			and auto_division = #{isAutoAssign}
		</if>
		and `status` = 'NORMAL'
		and role = 'COLLECTOR' 
		</where>
    
    </select>
    
    <select id="findAndValidateTaskList" resultMap="BaseResultMap">
        SELECT <include refid="baseSql"/>
        FROM  `t_task` 
        WHERE 
        `order_id` in
        <foreach collection="orderIds" item="item" open="(" close=")" separator=",">
        	#{item}
        </foreach>
        and collect_cycle = #{collectCycle}
        and product_type = #{productType}
        and order_status = 'PAYMENT'
    </select>
    
    <select id="findAndValidateUserList" resultType="com.cat.module.entity.User">
        SELECT
			id ,
			name
		FROM
			`t_user`
		WHERE
        	`id` in
        <foreach collection="collectIds" item="item" open="(" close=")" separator=",">
        	#{item}
        </foreach>
        and collect_cycle LIKE concat('%',#{collectCycle},'%')
        and product_type = #{productType}
		and `status` = 'NORMAL'
		and role = 'COLLECTOR' 
    
    </select>
    <update id="batchUpdateAssignTask" >
     <foreach collection="list" item="item" index="index" open="" close="" separator=";">
			UPDATE t_task 
			<set>
			    update_time = now(),
			    update_by = #{item.updateBy},
				collector_id = #{item.collectorId},
				collector_name = #{item.collectorName},
			</set>
			WHERE id = #{item.id}
	 </foreach>
    </update>
    
</mapper>